name: Version

on:
  push:
    branches: [ main ]

env:
  GO_VERSION: '1.22'

jobs:
  version:
    name: Semantic Version
    runs-on: ubuntu-latest
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
      new_release_git_tag: ${{ steps.semantic.outputs.new_release_git_tag }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install semantic-release
      run: |
        npm install -g semantic-release
        npm install -g @semantic-release/changelog
        npm install -g @semantic-release/git
        npm install -g @semantic-release/github
        npm install -g @semantic-release/exec

    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

    - name: Run semantic-release
      id: semantic
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: semantic-release

  update-version:
    name: Update Version Files
    runs-on: ubuntu-latest
    needs: version
    if: needs.version.outputs.new_release_published == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Update version in code
      run: |
        VERSION="${{ needs.version.outputs.new_release_version }}"
        echo "Updating version to ${VERSION}"
        
        # Update version in version.go if it exists
        if [ -f cmd/version.go ]; then
          sed -i "s/Version = \".*\"/Version = \"${VERSION}\"/" cmd/version.go
        fi

    - name: Commit version updates
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          git add .
          git commit -m "chore: update version to ${{ needs.version.outputs.new_release_version }} [skip ci]"
          git push origin main
        fi 